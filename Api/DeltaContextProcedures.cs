// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Api.Modelos;
using Microsoft.AspNetCore.Diagnostics;
using Microsoft.AspNetCore.Http.HttpResults;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.Extensions.Primitives;
using Oracle.ManagedDataAccess.Client;
using Oracle.ManagedDataAccess.Types;
using Swashbuckle.AspNetCore.SwaggerGen;
using System;
using System.Data;
using System.Reflection;
using System.Reflection.PortableExecutable;
using System.Text;
using System.Threading.Tasks;
using static Microsoft.EntityFrameworkCore.DbLoggerCategory;
using static System.Runtime.InteropServices.JavaScript.JSType;


namespace Api
{
    public partial class ModelOracleContext
    {
        private IDeltaContextProcedures _procedures;

        public virtual IDeltaContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new DeltaContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IDeltaContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Login>().HasNoKey().ToView(null);

        }
    }

    public partial class DeltaContextProcedures : IDeltaContextProcedures
    {
        private readonly ModelOracleContext _context;

        public DeltaContextProcedures(ModelOracleContext context)
        {
            _context = context;
        }

        public virtual async Task<Dictionary<bool, string>> Guardar<T>(T eMP, string usu, string pass)
        {
            T obj = default(T);
            obj = Activator.CreateInstance<T>();
            obj = eMP;
            DBOracle DB = new DBOracle();
            var countQuery = new Dictionary<bool, string>();
            StringBuilder query = new StringBuilder("insert into " + obj.GetType().Name + "(");
            StringBuilder querydataSection = new StringBuilder("values  (");
            foreach (PropertyInfo prop in obj.GetType().GetProperties())
            {
                if (prop.GetValue(obj) != null)
                {
                    var valu = prop.GetValue(obj);
                    var type = prop.GetType();
                    if (prop.PropertyType.Name != "List`1")
                    {
                        if (prop.PropertyType == typeof(string) || prop.PropertyType == typeof(DateTime?))
                        {
                            const string quote = "\'";
                            query.Append(prop.Name + ",");
                            if (prop.PropertyType == typeof(DateTime?))
                            {
                                var date = DateTime.Parse(valu.ToString()).ToString("dd/MM/yyyy");
                                querydataSection.Append(quote + date + quote + ",");
                            }
                            else
                            {
                                querydataSection.Append(quote + valu + quote + ",");
                            }

                        }
                        else
                        {
                            query.Append(prop.Name + ",");
                            querydataSection.Append(valu + ",");
                        }
                    }
                }
            }
            query = query.Remove(query.Length - 1, 1);
            query = query.Append(")");
            querydataSection = querydataSection.Remove(querydataSection.Length - 1, 1);
            querydataSection = querydataSection.Append(")");

            query = query.Append(querydataSection);
            try
            {
                if (DB.AfectarTabla("rh_mantenimientos.AfectarTabla", query.ToString(), usu, pass))
                {
                    //return true;
                    countQuery.Add(true, "");
                }
                else
                {

                    countQuery.Add(false, DB.ErrDesc);

                }
            }
            catch (Exception ex)
            {

                countQuery.Add(false, ex.Message);

            }
            finally
            {
                DB.Dispose();
            }

            return countQuery;
        }

        public static List<T> DataReaderMapToList<T>(IDataReader dr)
        {
            List<T> list = new List<T>();
            T obj = default(T);
            string error = "";
            try
            {
                while (dr.Read())
                {
                    obj = Activator.CreateInstance<T>();

                    foreach (PropertyInfo prop in obj.GetType().GetProperties())
                    {
                        var pro = prop.PropertyType.Name;
                        if (pro == "List`1")
                        {

                        }
                        else
                        {
                            if (!object.Equals(dr[prop.Name], DBNull.Value))
                            {
                                error = prop.Name;
                                prop.SetValue(obj, dr[prop.Name], null);
                            }
                        }


                    }
                    list.Add(obj);
                }
            }
            catch (Exception ex)
            {
                var res = error + "-" + ex.Message;
            }

            return list;
        }

        public static List<detalle_grupocentrocosto> datadetalle(int codemp)
        {
            List<detalle_grupocentrocosto> personList = new List<detalle_grupocentrocosto>();
            DBOracle DB = new DBOracle();
            string sql2 = "select * from detalle_grupocentrocosto where CODEMPLEADO=" + codemp;
            try
            {
                if (DB.EjecutaSQL(sql2))
                {

                    personList = DataReaderMapToList<detalle_grupocentrocosto>(DB.ora_DataReader);
                }
            }
            catch (Exception ex)
            {
            }
            finally
            {
                DB.Dispose();
            }
            return personList;
        }


        public static List<EMP_FICHA_SOCIAL> dataFicha(int codemp)
        {
            List<EMP_FICHA_SOCIAL> personList = new List<EMP_FICHA_SOCIAL>();
            DBOracle DB = new DBOracle();
            string sql2 = "select * from EMP_FICHA_SOCIAL where codemp=" + codemp;
            try
            {
                if (DB.EjecutaSQL(sql2))
                {

                    personList = DataReaderMapToList<EMP_FICHA_SOCIAL>(DB.ora_DataReader);
                }
            }
            catch (Exception ex)
            {
            }
            finally
            {
                DB.Dispose();
            }
            return personList;
        }

        public virtual List<T> Consultar<T>(T objeto, string usu, string pass)
        {
            T obj = default(T);
            obj = Activator.CreateInstance<T>();
            obj = objeto;
            List<T> personList = new List<T>();
            DBOracle DB = new DBOracle();
            DB.crearcadena(ClsConfig.DATA_SOURCE, usu, pass);

            try
            {
                if (DB.EjecutaSPR("rh_mantenimientos.consultas", obj.GetType().Name, usu, pass))
                {

                    personList = DataReaderMapToList<T>(DB.ora_DataReader);
                }
            }
            catch (Exception ex)
            {
            }
            finally
            {
                DB.Dispose();
            }
            return personList;
        }
        public virtual List<T> ConsultarNombreTabla<T>(string Tabla, string usu, string pass)
        {
            List<T> personList = new List<T>();
            DBOracle DB = new DBOracle();
            DB.crearcadena(ClsConfig.DATA_SOURCE, usu, pass);

            try
            {
                if (DB.EjecutaSPR("rh_mantenimientos.consultas", Tabla, usu, pass))
                {

                    personList = DataReaderMapToList<T>(DB.ora_DataReader);
                }
            }
            catch (Exception ex)
            {
            }
            finally
            {
                DB.Dispose();
            }
            return personList;
        }

        public virtual List<SEGUROS> Consultarseguro(int idempresa, string usu, string pass)
        {

            List<SEGUROS> personList = new List<SEGUROS>();
            DBOracle DB = new DBOracle();
            DB.crearcadena(ClsConfig.DATA_SOURCE, usu, pass);

            try
            {
                if (DB.EjecutaSimple("rh_mantenimientos.qry_tiposeguro", idempresa, usu, pass))
                {
                    while (DB.ora_DataReader.Read())
                    {
                        for (int i = 0; i < DB.ora_DataReader.FieldCount; i++)
                        {
                            SEGUROS sEGUROS = new SEGUROS();
                            string val = DB.ora_DataReader[i].ToString();

                        }



                    }

                }
            }
            catch (Exception ex)
            {
            }
            finally
            {
                DB.Dispose();
            }
            return personList;
        }

        public List<MenuDto> MenuPerfilUsuario(int codemp, string usuario, string pass, OutputParameter<int> returnValue, CancellationToken cancellationToken)
        {
            List<MenuDto> ListaMenu = new List<MenuDto>();
            List<Menu> personList = new List<Menu>();
            DBOracle DB = new DBOracle();

            DB.crearcadena(ClsConfig.DATA_SOURCE, usuario, pass);

            try
            {

                if (DB.MenuPerfilUsuario(codemp, usuario, pass))
                {
                    personList = DataReaderMapToList<Menu>(DB.ora_DataReader);
                    List<Menu> tempR1 = (from l1 in personList
                                         join l2 in personList on l1.ID_MENU equals l2.ID_MENU_NIVEL
                                         where l2.CONTADOR > 0
                                         select l1).Distinct().ToList();


                    MenuDto datoAd = new MenuDto();
                    datoAd.id = "1";
                    datoAd.label = "MENUITEMS.MENU.TEXT";
                    datoAd.isTitle = true;
                    ListaMenu.Add(datoAd);
                    foreach (Menu padre in tempR1)
                    {
                        MenuDto dato = new MenuDto();
                        dato.id = padre.ID_MENU;
                        dato.label = padre.DESCRIPCION;
                        //dato.link = padre.WFRM;
                        //dato.isTitle = dato.link=="#";
                        //dato.isLayout = dato.link!="#";
                        //dato.badge = new iconComponent();
                        //dato.badge.name = padre.URL_IMAGEN;
                        dato.icon = padre.URL_IMAGEN;
                        dato.parentId = padre.ID_MENU_NIVEL;
                        //Agrego Nivel 2
                        List<Menu> tempR2 = (from l1 in personList
                                             join l2 in personList on l1.ID_MENU equals l2.ID_MENU_NIVEL
                                             where l2.CONTADOR > 0 & l2.ID_MENU_NIVEL == padre.ID_MENU
                                             select l2).Distinct().ToList();
                        List<Child> lista = new List<Child>();
                        foreach (Menu hijo in tempR2)
                        {
                            Child dato2 = new Child();
                            dato2.id = hijo.ID_MENU;
                            dato2.label = hijo.DESCRIPCION;
                            dato2.link = hijo.WFRM;
                            //dato2.isTitle = dato.link == "";
                            //dato2.isLayout = dato.link != "";
                            //dato2.badge = new iconComponent();
                            //dato2.badge.name = hijo.URL_IMAGEN;
                            dato2.icon = hijo.URL_IMAGEN;
                            dato2.parentId = hijo.ID_MENU_NIVEL;
                            lista.Add(dato2);
                        }
                        dato.subItems = lista;
                        ListaMenu.Add(dato);
                    }

                    //List<Menu> tempR3 = (from l1 in personList
                    //                     where l1.CONTADOR > 0 & l1.NIVEL_MENU == 1
                    //                     select l1).Distinct().ToList();
                    //List<Menu> tempR4 = (from l1 in personList
                    //                     join l2 in tempR1 on l1.ID_MENU equals l2.ID_MENU_NIVEL
                    //                     select l1).Distinct().ToList();


                }


            }
            catch (Exception ex)
            {
            }
            finally
            {
                DB.Dispose();
            }
            return ListaMenu;
        }

        public virtual List<T> consultaRAW<T>(T objeto, string sentencia, string usu, string pass)
        {
            List<T> personList = new List<T>();
            DBOracle DB = new DBOracle();
            T obj = default(T);
            obj = Activator.CreateInstance<T>();
            obj = objeto;
            DB.crearcadena(ClsConfig.DATA_SOURCE, usu, pass);
            string sql2 = sentencia;
            try
            {
                if (DB.Ejecuta("rh_mantenimientos.consultasimple", sql2, usu, pass))
                {

                    personList = DataReaderMapToList<T>(DB.ora_DataReader);
                }
            }
            catch (Exception ex)
            {
            }
            finally
            {
                DB.Dispose();
            }
            return personList;

        }
        public virtual DataTable consultaSimple(string sentencia, string usu, string pass)
        {
            DataTable dt = new DataTable();
            DBOracle DB = new DBOracle();
            DB.crearcadena(ClsConfig.DATA_SOURCE, usu, pass);
            string sql2 = sentencia;
            try
            {
                if (DB.Ejecuta("rh_mantenimientos.consultasimple", sql2, usu, pass))
                {

                    dt.Load(DB.ora_DataReader);
                }
            }
            catch (Exception ex)
            {
            }
            finally
            {
                DB.Dispose();
            }
            return dt;

        }
        public virtual List<T> CallProceduresConsula<T>(T objeto, string sentencia, string usu, string pass)
        {
            List<T> personList = new List<T>();
            DBOracle DB = new DBOracle();
            T obj = default(T);
            obj = Activator.CreateInstance<T>();
            obj = objeto;
            DB.crearcadena(ClsConfig.DATA_SOURCE, usu, pass);
            string sql2 = sentencia;
            try
            {
                if (DB.Ejecuta("ACADEMICO1.PROC_K_ACADEMICO_WEB.callprocedimiento", sql2, usu, pass))
                {

                    personList = DataReaderMapToList<T>(DB.ora_DataReader);
                }
            }
            catch (Exception ex)
            {
            }
            finally
            {
                DB.Dispose();
            }
            return personList;

        }
        public DataTable CallProceduresConsulaDT(string sentencia, string usu, string pass)
        {
            DataTable dt = new DataTable();
            DBOracle DB = new DBOracle();
            DB.crearcadena(ClsConfig.DATA_SOURCE, usu, pass);
            string sql2 = sentencia;
            try
            {
                if (DB.Ejecuta("ACADEMICO1.PROC_K_ACADEMICO_WEB.callprocedimiento", sql2, usu, pass))
                {

                    dt.Load(DB.ora_DataReader);
                }
            }
            catch (Exception ex)
            {
            }
            finally
            {
                DB.Dispose();
            }
            return dt;

        }

        public virtual List<T> consultarXId<T>(T objeto, string usu, string pass, int idempresa)
        {
            List<T> personList = new List<T>();
            DBOracle DB = new DBOracle();
            T obj = default(T);
            obj = Activator.CreateInstance<T>();
            obj = objeto;
            DB.crearcadena(ClsConfig.DATA_SOURCE, usu, pass);
            string sql2 = "select * from " + obj.GetType().Name + " where ID_EMPRESA = " + idempresa;
            try
            {
                if (DB.Ejecuta("rh_mantenimientos.consultasimple", sql2, usu, pass))
                {

                    personList = DataReaderMapToList<T>(DB.ora_DataReader);
                }
            }
            catch (Exception ex)
            {
            }
            finally
            {
                DB.Dispose();
            }
            return personList;

        }

        public virtual List<T> consultarEMP<T>(T objeto, string usu, string pass, int idempresa)
        {
            List<T> personList = new List<T>();
            DBOracle DB = new DBOracle();
            T obj = default(T);
            obj = Activator.CreateInstance<T>();
            obj = objeto;
            DB.crearcadena(ClsConfig.DATA_SOURCE, usu, pass);
            string sql2 = "select * from " + obj.GetType().Name + " where ID_EMPRESA = " + idempresa + " order by ACTIVO,razonsocial";
            try
            {
                if (DB.Ejecuta("rh_mantenimientos.consultasimple", sql2, usu, pass))
                {

                    personList = DataReaderMapToList<T>(DB.ora_DataReader);
                }
            }
            catch (Exception ex)
            {
            }
            finally
            {
                DB.Dispose();
            }
            return personList;

        }

        public virtual async Task<EMP> consultarEMPID(int ID)
        {
            List<EMP> personList = new List<EMP>();
            DBOracle DB = new DBOracle();
            string sql2 = "select * from EMP where CODEMP=" + ID;
            try
            {
                if (DB.EjecutaSQL(sql2))
                {

                    personList = DataReaderMapToList<EMP>(DB.ora_DataReader);
                }
            }
            catch (Exception ex)
            {
            }
            finally
            {
                DB.Dispose();
            }
            return personList.First();

        }
        public virtual int ConsultarnumeroUltimoRegistro<T>(T objeto, string campo, string usu, string pass)
        {
            int codigo = 0;
            T obj = default(T);
            obj = Activator.CreateInstance<T>();
            obj = objeto;
            DBOracle DB = new DBOracle();

            try
            {
                DB.crearcadena(ClsConfig.DATA_SOURCE, usu, pass);
                string sql2 = "select max(" + campo + ") from " + obj.GetType().Name;
                if (DB.Ejecuta("rh_mantenimientos.consultasimple", sql2, usu, pass))
                {
                    while (DB.ora_DataReader.Read())
                    {
                        for (int i = 0; i < DB.ora_DataReader.FieldCount; i++)
                        {
                            string val = DB.ora_DataReader[i].ToString();
                            codigo = int.Parse(val);
                        }
                    }

                }
                return codigo + 1;
            }
            catch (Exception ex)
            {
            }
            finally
            {
                DB.Dispose();
            }
            return codigo + 1;

        }

        public virtual async Task<Dictionary<bool, string>> delete<T>(T objeto, string campo, string valor, string usu, string pass)
        {
            int codigo = 0;
            T obj = default(T);
            obj = Activator.CreateInstance<T>();
            obj = objeto;
            DBOracle DB = new DBOracle();
            var countQuery = new Dictionary<bool, string>();
            try
            {
                DB.crearcadena(ClsConfig.DATA_SOURCE, usu, pass);
                string query = "delete " + obj.GetType().Name + " where " + campo + "=" + valor;
                if (DB.AfectarTabla("rh_mantenimientos.AfectarTabla", query.ToString(), usu, pass))
                {
                    countQuery.Add(true, DB.ErrDesc);

                }
                else
                {
                    countQuery.Add(false, DB.ErrDesc);
                }

            }
            catch (Exception ex)
            {
                countQuery.Add(false, ex.Message);
            }
            finally
            {
                DB.Dispose();
            }
            return countQuery;

        }
        public virtual int ConsultarUltimoCODEMP<T>(T objeto, string usu, string pass)
        {
            int codigo = 0;
            T obj = default(T);
            obj = Activator.CreateInstance<T>();
            obj = objeto;
            DBOracle DB = new DBOracle();

            try
            {
                DB.crearcadena(ClsConfig.DATA_SOURCE, usu, pass);
                string sql2 = "select max(codemp) from " + obj.GetType().Name;
                if (DB.Ejecuta("rh_mantenimientos.consultasimple", sql2, usu, pass))
                {
                    while (DB.ora_DataReader.Read())
                    {
                        for (int i = 0; i < DB.ora_DataReader.FieldCount; i++)
                        {

                            string val = DB.ora_DataReader[i].ToString();
                            codigo = int.Parse(val);
                        }



                    }

                }
                return codigo;
            }
            catch (Exception ex)
            {
            }
            finally
            {
                DB.Dispose();
            }
            return codigo;

        }

        public virtual async Task<Dictionary<bool, string>> Update<T>(T eMP, string campowhere, string valorwhere, string usu, string pass)
        {
            T obj = default(T);
            obj = Activator.CreateInstance<T>();
            obj = eMP;
            DBOracle DB = new DBOracle();
            var countQuery = new Dictionary<bool, string>();
            StringBuilder query = new StringBuilder("update " + obj.GetType().Name + " SET ");

            foreach (PropertyInfo prop in obj.GetType().GetProperties())
            {
                if (prop.GetValue(obj) != null)
                {
                    var valu = prop.GetValue(obj);
                    var type = prop.GetType();
                    if (prop.PropertyType.Name != "List`1")
                    {
                        const string quote = "\'";
                        query.Append(prop.Name + "=");
                        if (prop.PropertyType == typeof(string) || prop.PropertyType == typeof(DateTime?))
                        {

                            if (prop.PropertyType == typeof(DateTime?))
                            {
                                var date = DateTime.Parse(valu.ToString()).ToString("dd/MM/yyyy");
                                query.Append(quote + date + quote + ",");
                            }
                            else
                            {
                                query.Append(quote + valu + quote + ",");
                            }

                        }
                        else
                        {
                            query.Append(valu + ",");

                        }
                    }
                }
            }
            query = query.Remove(query.Length - 1, 1);
            query = query.Append(" where " + campowhere + "=" + valorwhere);
            try
            {
                if (DB.AfectarTabla("rh_mantenimientos.AfectarTabla", query.ToString(), usu, pass))
                {
                    countQuery.Add(true, DB.ErrDesc);

                }
                else
                {
                    countQuery.Add(false, DB.ErrDesc);
                }
            }
            catch (Exception ex)
            {


                countQuery.Add(false, ex.Message);
            }
            finally
            {
                DB.Dispose();
            }

            return countQuery;
        }
        public virtual async Task<Dictionary<bool, string>> Updatecodigostring<T>(T eMP, string campowhere, string valorwhere, string usu, string pass)
        {
            T obj = default(T);
            obj = Activator.CreateInstance<T>();
            obj = eMP;
            DBOracle DB = new DBOracle();
            var countQuery = new Dictionary<bool, string>();
            StringBuilder query = new StringBuilder("update " + obj.GetType().Name + " SET ");

            foreach (PropertyInfo prop in obj.GetType().GetProperties())
            {
                if (prop.GetValue(obj) != null)
                {
                    var valu = prop.GetValue(obj);
                    var type = prop.GetType();
                    if (prop.PropertyType.Name != "List`1")
                    {
                        const string quote = "\'";
                        query.Append(prop.Name + "=");
                        if (prop.PropertyType == typeof(string) || prop.PropertyType == typeof(DateTime?))
                        {

                            if (prop.PropertyType == typeof(DateTime?))
                            {
                                var date = DateTime.Parse(valu.ToString()).ToString("dd/MM/yyyy");
                                query.Append(quote + date + quote + ",");
                            }
                            else
                            {
                                query.Append(quote + valu + quote + ",");
                            }

                        }
                        else
                        {
                            query.Append(valu + ",");

                        }
                    }
                }
            }
            query = query.Remove(query.Length - 1, 1);
            query = query.Append(" where " + campowhere + "='" + valorwhere + "'");
            try
            {
                if (DB.AfectarTabla("rh_mantenimientos.AfectarTabla", query.ToString(), usu, pass))
                {
                    countQuery.Add(true, DB.ErrDesc);

                }
                else
                {
                    countQuery.Add(false, DB.ErrDesc);
                }
            }
            catch (Exception ex)
            {


                countQuery.Add(false, ex.Message);
            }
            finally
            {
                DB.Dispose();
            }

            return countQuery;
        }



        public virtual async Task<List<Login>> QRY_Login(string usuario, string pass, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new OracleParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                OracleDbType = OracleDbType.Varchar2,
                UdtTypeName = "proc_k_academico_web.existe"
            };

            var sqlParameters = new[]
            {
                new OracleParameter
                {
                    ParameterName = "pv_usuario",
                    Value = usuario ?? Convert.DBNull,
                    OracleDbType = OracleDbType.Varchar2,
                    Direction = System.Data.ParameterDirection.Input,
                },new OracleParameter
                {
                    ParameterName = "pv_pass",
                    Value = pass ?? Convert.DBNull,
                    OracleDbType = OracleDbType.Varchar2,
                    Direction = System.Data.ParameterDirection.Input,
                },new OracleParameter
                {
                    ParameterName = "existe",
                    OracleDbType = OracleDbType.Varchar2,
                    Direction = System.Data.ParameterDirection.Output,
                },
                new OracleParameter
                {
                    ParameterName = "lgerror",
                    OracleDbType = OracleDbType.Varchar2,
                    Direction = System.Data.ParameterDirection.Output,
                }

            };
            DBOracle bOracle = new DBOracle();
            _context.Database.SetConnectionString(bOracle.crearcadena(ClsConfig.DATA_SOURCE, usuario, pass));
            await _context.Database.ExecuteSqlRawAsync("BEGIN proc_k_academico_web.qryloginpass(:pv_usuario, :pv_pass, :existe, :lgerror); END;", sqlParameters);

            // var rowsAffected = _context.Database.ExecuteSqlRaw("BEGIN proc_k_academico_web.qryloginpass(:pv_usuario, :pv_pass, :existe, :lgerror); END;", sqlParameters);

            //     var _ = await _context.SqlQueryAsync<Login>("BEGIN proc_k_academico_web.qryloginpass(:pv_usuario, :pv_pass, :existe, :lgerror); END;", sqlParameters, cancellationToken);

            //      returnValue?.SetValue(parameterreturnValue.Value);

            return null;
        }
        public async Task<DataSet> ConsultarActa(string usuario, string pass, string periodo, int codigo)
        {
            var ds = new DataSet();
            List<object> listaDeListas = new List<object>();
            try
            {


                using (var connection = new OracleConnection(new DBOracle().crearcadena(ClsConfig.DATA_SOURCE, usuario, pass)))
                {
                    connection.FetchSize = 10 * 1024 * 1024; // 10 MB
                    await connection.OpenAsync();
                    using (var command = connection.CreateCommand())
                    {
                        command.CommandText = "proc_k_otrasactas_web.QRY_ConsultaActaRG";
                        command.CommandType = CommandType.StoredProcedure;

                        command.Parameters.Add("pv_periodo", OracleDbType.Varchar2, 50).Value = periodo;
                        command.Parameters.Add("pn_codcab", OracleDbType.Int32).Value = codigo;
                        command.Parameters.Add("pv_usuario", OracleDbType.Varchar2, 50).Value = usuario;

                        command.Parameters.Add("cab", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                        command.Parameters.Add("asis", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                        command.Parameters.Add("orden", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                        command.Parameters.Add("adjuntos", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                        command.InitialLOBFetchSize = 10 * 1024 * 1024; // 10 MB
                        
                        // Ejecutar y leer cursores uno por uno
                        await command.ExecuteNonQueryAsync();

                        for (int i = 3; i < command.Parameters.Count; i++) // Los REF CURSOR empiezan en el índice 3
                        {
                                var refCursor = (OracleRefCursor)command.Parameters[i].Value;
                                using var reader = refCursor.GetDataReader();
                                var dt = new DataTable();
                                dt.Load(reader);
                                ds.Tables.Add(dt);
                           
                        }
                    }
                }
            }
            catch (Exception)
            {
                ds = null;
                throw;
            }
            return ds;
        }

    }
}
