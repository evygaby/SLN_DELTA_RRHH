// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System.Data;
using System.Reflection;
using System.Text;
using Api.Modelos;
using Microsoft.AspNetCore.Http.HttpResults;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.Extensions.Primitives;
using Oracle.ManagedDataAccess.Client;
using Swashbuckle.AspNetCore.SwaggerGen;
using static System.Runtime.InteropServices.JavaScript.JSType;
using static Microsoft.EntityFrameworkCore.DbLoggerCategory;


namespace Api
{
    public partial class ModelOracleContext
    {
        private IDeltaContextProcedures _procedures;

        public virtual IDeltaContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new DeltaContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IDeltaContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Login>().HasNoKey().ToView(null);
        
        }
    }

    public partial class DeltaContextProcedures : IDeltaContextProcedures
    {
        private readonly ModelOracleContext _context;

        public DeltaContextProcedures(ModelOracleContext context)
        {
            _context = context;
        }

        public static bool  Guardar<T>(string tableName,T eMP,ref string error)
        {
            T obj = default(T);
            obj = Activator.CreateInstance<T>();
            obj = eMP;
            DBOracle DB = new DBOracle();
           
       
            StringBuilder query = new StringBuilder("insert into " + tableName + "(");
            StringBuilder querydataSection = new StringBuilder("values  (");
            foreach (PropertyInfo prop in obj.GetType().GetProperties())
            {
                if (prop.GetValue(obj) != null)
                {
                    var valu = prop.GetValue(obj);
                    var type = prop.GetType();
                    if (prop.PropertyType == typeof(string))
                    {
                        const string quote = "\'";
                        query.Append(prop.Name + ",");
                        querydataSection.Append(quote + valu + quote+ ",");
                    }
                    else
                    {
                        query.Append(prop.Name + ",");
                        querydataSection.Append(valu + ",");
                    }                
                }                          
            }
            query = query.Remove(query.Length - 1, 1);
            query = query.Append(")");
            querydataSection = querydataSection.Remove(querydataSection.Length - 1, 1);
            querydataSection = querydataSection.Append(")" );

            query = query.Append(querydataSection);
            try
            {
                if (DB.EjecutaSQL(query.ToString()))
                {
                    return true;
                  
                }
                else
                {
                    error = DB.ErrDesc;
                    return false;
                }
            }
            catch (Exception ex)
            {
                error = ex.Message;
                return false;
            }
            finally
            {
                DB.Dispose();
            }

            return true ;
        }

        public static List<T> DataReaderMapToList<T>(IDataReader dr)
        {
            List<T> list = new List<T>();
            T obj = default(T);
            while (dr.Read())
            {
                obj = Activator.CreateInstance<T>();
                foreach (PropertyInfo prop in obj.GetType().GetProperties())
                {
                    if (!object.Equals(dr[prop.Name], DBNull.Value))
                    {
                        prop.SetValue(obj, dr[prop.Name], null);
                    }
                }
                list.Add(obj);
            }
            return list;
        }
  
        public static List<detalle_grupocentrocosto> datadetalle(int codemp)
        {
            List<detalle_grupocentrocosto> personList = new List<detalle_grupocentrocosto>();
            DBOracle DB = new DBOracle();
            string sql2 = "select * from detalle_grupocentrocosto where CODEMPLEADO="+ codemp;
            try
            {
                if (DB.EjecutaSQL(sql2))
                {

                    personList = DataReaderMapToList<detalle_grupocentrocosto>(DB.ora_DataReader);
                }
            }
            catch (Exception ex)
            {
            }
            finally
            {
                DB.Dispose();
            }
            return personList;
        }


        public static List<EMP_FICHA_SOCIAL> dataFicha(int codemp)
        {
            List<EMP_FICHA_SOCIAL> personList = new List<EMP_FICHA_SOCIAL>();
            DBOracle DB = new DBOracle();
            string sql2 = "select * from EMP_FICHA_SOCIAL where codemp=" + codemp;
            try
            {
                if (DB.EjecutaSQL(sql2))
                {

                    personList = DataReaderMapToList<EMP_FICHA_SOCIAL>(DB.ora_DataReader);
                }
            }
            catch (Exception ex)
            {
            }
            finally
            {
                DB.Dispose();
            }
            return personList;
        }
        public static List<grupo_centrocosto> datagrupo()
        {
            List<grupo_centrocosto> personList = new List<grupo_centrocosto>();
            DBOracle DB = new DBOracle();
            string sql2 = "select * from grupo_centrocosto";
            try
            {
                if (DB.EjecutaSQL(sql2))
                {

                    personList = DataReaderMapToList<grupo_centrocosto>(DB.ora_DataReader);
                }
            }
            catch (Exception ex)
            {
            }
            finally
            {
                DB.Dispose();
            }
            return personList;
        }


        public virtual async Task<List<EMP>> consultarEMP(string usu,string pass)
        {
            List<EMP> personList = new List<EMP>();
            DBOracle DB = new DBOracle();
            DB.crearcadena(ClsConfig.DATA_SOURCE, usu, pass);
            string sql2 = "select * from EMP";
            try
            {
                if (DB.EjecutaSQL(sql2))
                {

                    personList = DataReaderMapToList<EMP>(DB.ora_DataReader);
                }
            }
            catch (Exception ex)
            {
            }
            finally
            {
                DB.Dispose();
            }
            return personList;

        }

        public virtual async Task<EMP> consultarEMPID(int ID)
        {
            List<EMP> personList = new List<EMP>();
            DBOracle DB = new DBOracle();
            string sql2 = "select * from EMP where CODEMP=" + ID;
            try
            {
                if (DB.EjecutaSQL(sql2))
                {

                    personList = DataReaderMapToList<EMP>(DB.ora_DataReader);
                }
            }
            catch (Exception ex)
            {
            }
            finally
            {
                DB.Dispose();
            }
            return personList.First();

        }

        public virtual async Task<Dictionary<bool ,string>> GuardarTabla(EMP clase)
       {
            string mensaje="";
            var countQuery = new Dictionary<bool, string>();
            DBOracle DB = new DBOracle();
            int codigo = 0;
            if (DB.EjecutaSQL("select max(codemp) from EMP"))
            {
                while (DB.ora_DataReader.Read())
                {
                    for (int i = 0; i < DB.ora_DataReader.FieldCount; i++)
                    {
                        
                        string val = DB.ora_DataReader[i].ToString();
                        codigo = int.Parse(val);
                    }

                   

                }

            }
            clase.CODEMP = codigo + 1;
            if (Guardar<EMP>("EMP", clase, ref mensaje))
            {
                countQuery.Add(true, mensaje);
            }
            else
            {
                countQuery.Add(false, mensaje);
            }

           return countQuery;
            
        }
        public virtual async Task<List<Login>> QRY_Login(string usuario, string pass, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new OracleParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                OracleDbType = OracleDbType.Varchar2,
                UdtTypeName = "proc_k_academico_web.existe"
            };

            var sqlParameters = new[]
            {
                new OracleParameter
                {
                    ParameterName = "pv_usuario",
                    Value = usuario ?? Convert.DBNull,
                    OracleDbType = OracleDbType.Varchar2, 
                    Direction = System.Data.ParameterDirection.Input,
                },new OracleParameter
                {
                    ParameterName = "pv_pass",
                    Value = pass ?? Convert.DBNull,
                    OracleDbType = OracleDbType.Varchar2,
                    Direction = System.Data.ParameterDirection.Input,
                },new OracleParameter
                {
                    ParameterName = "existe",                 
                    OracleDbType = OracleDbType.Varchar2,
                    Direction = System.Data.ParameterDirection.Output,
                },
                new OracleParameter
                {
                    ParameterName = "lgerror",
                    OracleDbType = OracleDbType.Varchar2,
                    Direction = System.Data.ParameterDirection.Output,
                }
                
            };
            DBOracle bOracle = new DBOracle();
            _context.Database.SetConnectionString(bOracle.crearcadena(ClsConfig.DATA_SOURCE, usuario, pass));
           await  _context.Database.ExecuteSqlRawAsync("BEGIN proc_k_academico_web.qryloginpass(:pv_usuario, :pv_pass, :existe, :lgerror); END;", sqlParameters);

            // var rowsAffected = _context.Database.ExecuteSqlRaw("BEGIN proc_k_academico_web.qryloginpass(:pv_usuario, :pv_pass, :existe, :lgerror); END;", sqlParameters);

      //     var _ = await _context.SqlQueryAsync<Login>("BEGIN proc_k_academico_web.qryloginpass(:pv_usuario, :pv_pass, :existe, :lgerror); END;", sqlParameters, cancellationToken);

      //      returnValue?.SetValue(parameterreturnValue.Value);

            return null;
        }
        


    }
}
