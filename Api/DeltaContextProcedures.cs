// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using System.Data;
using System.Reflection;
using System.Text;
using Api.Modelos;
using Microsoft.AspNetCore.Http.HttpResults;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.Extensions.Primitives;
using Oracle.ManagedDataAccess.Client;
using Swashbuckle.AspNetCore.SwaggerGen;
using static System.Runtime.InteropServices.JavaScript.JSType;
using static Microsoft.EntityFrameworkCore.DbLoggerCategory;


namespace Api
{
    public partial class ModelOracleContext
    {
        private IDeltaContextProcedures _procedures;

        public virtual IDeltaContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new DeltaContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IDeltaContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Login>().HasNoKey().ToView(null);
        
        }
    }

    public partial class DeltaContextProcedures : IDeltaContextProcedures
    {
        private readonly ModelOracleContext _context;

        public DeltaContextProcedures(ModelOracleContext context)
        {
            _context = context;
        }
      
        public virtual async Task<Dictionary<bool, string>> Guardar<T>(T eMP, string usu, string pass)
        {
            T obj = default(T);
            obj = Activator.CreateInstance<T>();
            obj = eMP;
            DBOracle DB = new DBOracle();
            var countQuery = new Dictionary<bool, string>();
            StringBuilder query = new StringBuilder("insert into " + obj.GetType().Name + "(");
            StringBuilder querydataSection = new StringBuilder("values  (");
            foreach (PropertyInfo prop in obj.GetType().GetProperties())
            {
                if (prop.GetValue(obj) != null)
                {
                    var valu = prop.GetValue(obj);
                    var type = prop.GetType();
                    if (prop.PropertyType.Name != "List`1")
                    {
                        if (prop.PropertyType == typeof(string) || prop.PropertyType == typeof(DateTime?))
                    {
                        const string quote = "\'";
                        query.Append(prop.Name + ",");
                            if (prop.PropertyType == typeof(DateTime?))
                            {
                                var date =DateTime.Parse(valu.ToString()).ToString("dd/MM/yyyy");
                                querydataSection.Append(quote + date + quote + ",");
                            }
                            else
                            {
                                querydataSection.Append(quote + valu + quote + ",");
                            }
                               
                    }
                    else
                    {
                        query.Append(prop.Name + ",");
                        querydataSection.Append(valu + ",");
                    }
                  }
                }                          
            }
            query = query.Remove(query.Length - 1, 1);
            query = query.Append(")");
            querydataSection = querydataSection.Remove(querydataSection.Length - 1, 1);
            querydataSection = querydataSection.Append(")" );

            query = query.Append(querydataSection);
            try
            {
                if (DB.AfectarTabla("rh_mantenimientos.AfectarTabla", query.ToString (), usu, pass))
                {
                    //return true;
                    countQuery.Add(true,"");
                }
                else
                {
                    
                    countQuery.Add(false, DB.ErrDesc);
                   
                }
            }
            catch (Exception ex)
            {
               
                countQuery.Add(false, ex.Message);
                
            }
            finally
            {
                DB.Dispose();
            }

            return countQuery;
        }

        public static List<T> DataReaderMapToList<T>(IDataReader dr)
        {
            List<T> list = new List<T>();
            T obj = default(T);
            string error = "";
            try {
                while (dr.Read())
                {
                    obj = Activator.CreateInstance<T>();

                    foreach (PropertyInfo prop in obj.GetType().GetProperties())
                    {
                        var pro = prop.PropertyType.Name;
                        if (pro == "List`1")
                        {
                           
                        }
                        else
                        {
                            if (!object.Equals(dr[prop.Name], DBNull.Value))
                            {
                                error = prop.Name;
                                prop.SetValue(obj, dr[prop.Name], null);
                            }
                        }


                    }
                    list.Add(obj);
                }
            }
            catch(Exception ex)
            {
                var res = error+"-"+ ex.Message ;
            }
           
            return list;
        }
  
        public static List<detalle_grupocentrocosto> datadetalle(int codemp)
        {
            List<detalle_grupocentrocosto> personList = new List<detalle_grupocentrocosto>();
            DBOracle DB = new DBOracle();
            string sql2 = "select * from detalle_grupocentrocosto where CODEMPLEADO="+ codemp;
            try
            {
                if (DB.EjecutaSQL(sql2))
                {

                    personList = DataReaderMapToList<detalle_grupocentrocosto>(DB.ora_DataReader);
                }
            }
            catch (Exception ex)
            {
            }
            finally
            {
                DB.Dispose();
            }
            return personList;
        }


        public static List<EMP_FICHA_SOCIAL> dataFicha(int codemp)
        {
            List<EMP_FICHA_SOCIAL> personList = new List<EMP_FICHA_SOCIAL>();
            DBOracle DB = new DBOracle();
            string sql2 = "select * from EMP_FICHA_SOCIAL where codemp=" + codemp;
            try
            {
                if (DB.EjecutaSQL(sql2))
                {

                    personList = DataReaderMapToList<EMP_FICHA_SOCIAL>(DB.ora_DataReader);
                }
            }
            catch (Exception ex)
            {
            }
            finally
            {
                DB.Dispose();
            }
            return personList;
        }
 
        public virtual List<T> Consultar<T>(T objeto,string usu, string pass)
        {
            T obj = default(T);
            obj = Activator.CreateInstance<T>();
            obj = objeto;
            List<T> personList = new List<T>();
            DBOracle DB = new DBOracle();
            DB.crearcadena(ClsConfig.DATA_SOURCE, usu, pass);

            try
            {
                if (DB.EjecutaSPR("rh_mantenimientos.consultas", obj.GetType().Name, usu, pass))
                {

                    personList = DataReaderMapToList<T>(DB.ora_DataReader);
                }
            }
            catch (Exception ex)
            {
            }
            finally
            {
                DB.Dispose();
            }
            return personList;
        }

        public virtual List<T> consultaRAW<T>(T objeto, string sentencia, string usu, string pass)
        {
            List<T> personList = new List<T>();
            DBOracle DB = new DBOracle();
            T obj = default(T);
            obj = Activator.CreateInstance<T>();
            obj = objeto;
            DB.crearcadena(ClsConfig.DATA_SOURCE, usu, pass);
            string sql2 = sentencia;
            try
            {
                if (DB.Ejecuta("rh_mantenimientos.consultasimple", sql2, usu, pass))
                {

                    personList = DataReaderMapToList<T>(DB.ora_DataReader);
                }
            }
            catch (Exception ex)
            {
            }
            finally
            {
                DB.Dispose();
            }
            return personList;

        }

        public virtual  List<T> consultarXId<T>(T objeto, string usu,string pass,int idempresa)
        {
            List<T> personList = new List<T>();
            DBOracle DB = new DBOracle();
            T obj = default(T);
            obj = Activator.CreateInstance<T>();
            obj = objeto;
            DB.crearcadena(ClsConfig.DATA_SOURCE, usu, pass);
            string sql2 = "select * from "+ obj.GetType().Name + " where ID_EMPRESA = " +idempresa;
            try
            {
                if (DB.Ejecuta("rh_mantenimientos.consultasimple", sql2,usu,pass))
                {

                    personList = DataReaderMapToList<T>(DB.ora_DataReader);
                }
            }
            catch (Exception ex)
            {
            }
            finally
            {
                DB.Dispose();
            }
            return personList;

        }

        public virtual async Task<EMP> consultarEMPID(int ID)
        {
            List<EMP> personList = new List<EMP>();
            DBOracle DB = new DBOracle();
            string sql2 = "select * from EMP where CODEMP=" + ID;
            try
            {
                if (DB.EjecutaSQL(sql2))
                {

                    personList = DataReaderMapToList<EMP>(DB.ora_DataReader);
                }
            }
            catch (Exception ex)
            {
            }
            finally
            {
                DB.Dispose();
            }
            return personList.First();

        }
        public virtual int ConsultarnumeroUltimoRegistro<T>(T objeto, string campo, string usu, string pass)
        {
            int codigo = 0;
            T obj = default(T);
            obj = Activator.CreateInstance<T>();
            obj = objeto;
            DBOracle DB = new DBOracle();

            try
            {
                DB.crearcadena(ClsConfig.DATA_SOURCE, usu, pass);
                string sql2 = "select max("+ campo + ") from " + obj.GetType().Name;
                if (DB.Ejecuta("rh_mantenimientos.consultasimple", sql2, usu, pass))
                {
                    while (DB.ora_DataReader.Read())
                    {
                        for (int i = 0; i < DB.ora_DataReader.FieldCount; i++)
                        {
                            string val = DB.ora_DataReader[i].ToString();
                            codigo = int.Parse(val);
                        }
                    }

                }
                return codigo + 1;
            }
            catch (Exception ex)
            {
            }
            finally
            {
                DB.Dispose();
            }
            return codigo + 1;

        }

        public virtual async Task<Dictionary<bool, string>> delete<T>(T objeto, string campo, string valor, string usu, string pass)
        {
            int codigo = 0;
            T obj = default(T);
            obj = Activator.CreateInstance<T>();
            obj = objeto;
            DBOracle DB = new DBOracle();
            var countQuery = new Dictionary<bool, string>();
            try
            {
                DB.crearcadena(ClsConfig.DATA_SOURCE, usu, pass);
                string query = "delete " + obj.GetType().Name+" where "+ campo+"="+ valor;
                if (DB.AfectarTabla("rh_mantenimientos.AfectarTabla", query.ToString(), usu, pass))
                {
                    countQuery.Add(true, DB.ErrDesc);

                }
                else
                {
                    countQuery.Add(false, DB.ErrDesc);
                }
               
            }
            catch (Exception ex)
            {
                countQuery.Add(false, ex.Message);
            }
            finally
            {
                DB.Dispose();
            }
            return countQuery;

        }
        public virtual int ConsultarUltimoCODEMP<T>(T objeto, string usu, string pass)
        {
            int codigo = 0;
            T obj = default(T);
            obj = Activator.CreateInstance<T>();
            obj = objeto;
            DBOracle DB = new DBOracle();

            try
            {
                DB.crearcadena(ClsConfig.DATA_SOURCE, usu, pass);
                string sql2 = "select max(codemp) from " + obj.GetType().Name;
                if (DB.Ejecuta("rh_mantenimientos.consultasimple", sql2, usu, pass))
                {
                    while (DB.ora_DataReader.Read())
                    {
                        for (int i = 0; i < DB.ora_DataReader.FieldCount; i++)
                        {

                            string val = DB.ora_DataReader[i].ToString();
                            codigo = int.Parse(val);
                        }



                    }

                }
                return codigo;
            }
            catch (Exception ex)
            {
            }
            finally
            {
                DB.Dispose();
            }
            return codigo;

        }

        public virtual async Task<Dictionary<bool, string>> Update<T>(T eMP,string campowhere,string valorwhere, string usu, string pass)
        {
            T obj = default(T);
            obj = Activator.CreateInstance<T>();
            obj = eMP;
            DBOracle DB = new DBOracle();
            var countQuery = new Dictionary<bool, string>();
            StringBuilder query = new StringBuilder("update " + obj.GetType().Name + " SET ");
           
            foreach (PropertyInfo prop in obj.GetType().GetProperties())
            {
                if (prop.GetValue(obj) != null)
                {
                    var valu = prop.GetValue(obj);
                    var type = prop.GetType();
                    if (prop.PropertyType.Name != "List`1")
                    {
                        const string quote = "\'";
                        query.Append(prop.Name + "=");
                        if (prop.PropertyType == typeof(string) || prop.PropertyType == typeof(DateTime?))
                        {
                            
                            if (prop.PropertyType == typeof(DateTime?))
                            {
                                var date = DateTime.Parse(valu.ToString()).ToString("dd/MM/yyyy");
                                query.Append(quote + date + quote + ",");
                            }
                            else
                            {
                                query.Append(quote + valu + quote + ",");
                            }

                        }
                        else
                        {
                            query.Append( valu + ",");

                        }
                    }
                }
            }
            query = query.Remove(query.Length - 1, 1);
            query = query.Append(" where "+campowhere+"="+valorwhere );
            try
            {
                if (DB.AfectarTabla("rh_mantenimientos.AfectarTabla", query.ToString(), usu, pass))
                {
                    countQuery.Add(true , DB.ErrDesc);

                }
                else
                {
                    countQuery.Add(false, DB.ErrDesc);
                }
            }
            catch (Exception ex)
            {
                

                countQuery.Add(false, ex.Message);
            }
            finally
            {
                DB.Dispose();
            }

            return countQuery;
        }
     

        public virtual async Task<List<Login>> QRY_Login(string usuario, string pass, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new OracleParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                OracleDbType = OracleDbType.Varchar2,
                UdtTypeName = "proc_k_academico_web.existe"
            };

            var sqlParameters = new[]
            {
                new OracleParameter
                {
                    ParameterName = "pv_usuario",
                    Value = usuario ?? Convert.DBNull,
                    OracleDbType = OracleDbType.Varchar2, 
                    Direction = System.Data.ParameterDirection.Input,
                },new OracleParameter
                {
                    ParameterName = "pv_pass",
                    Value = pass ?? Convert.DBNull,
                    OracleDbType = OracleDbType.Varchar2,
                    Direction = System.Data.ParameterDirection.Input,
                },new OracleParameter
                {
                    ParameterName = "existe",                 
                    OracleDbType = OracleDbType.Varchar2,
                    Direction = System.Data.ParameterDirection.Output,
                },
                new OracleParameter
                {
                    ParameterName = "lgerror",
                    OracleDbType = OracleDbType.Varchar2,
                    Direction = System.Data.ParameterDirection.Output,
                }
                
            };
            DBOracle bOracle = new DBOracle();
            _context.Database.SetConnectionString(bOracle.crearcadena(ClsConfig.DATA_SOURCE, usuario, pass));
           await  _context.Database.ExecuteSqlRawAsync("BEGIN proc_k_academico_web.qryloginpass(:pv_usuario, :pv_pass, :existe, :lgerror); END;", sqlParameters);

            // var rowsAffected = _context.Database.ExecuteSqlRaw("BEGIN proc_k_academico_web.qryloginpass(:pv_usuario, :pv_pass, :existe, :lgerror); END;", sqlParameters);

      //     var _ = await _context.SqlQueryAsync<Login>("BEGIN proc_k_academico_web.qryloginpass(:pv_usuario, :pv_pass, :existe, :lgerror); END;", sqlParameters, cancellationToken);

      //      returnValue?.SetValue(parameterreturnValue.Value);

            return null;
        }
        


    }
}
